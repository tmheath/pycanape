name: CI

on: [push, pull_request]

env:
  PY_COLORS: "1"

jobs:
  test:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [
          "3.8",
          "3.9",
          "3.10",
          "3.11",
          "3.12",
        ]
      fail-fast: false
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest python-can==4.*
        python -m pip install .
    - name: Test
      run: |
        python -m pytest

  mypy:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install dependencies
      run: |
        python -m pip install -e .[dev]

    - name: mypy 3.8
      run: |
        mypy --python-version 3.8 .
    - name: mypy 3.9
      run: |
        mypy --python-version 3.9 .
    - name: mypy 3.10
      run: |
        mypy --python-version 3.10 .
    - name: mypy 3.11
      run: |
        mypy --python-version 3.11 .
    - name: mypy 3.12
      run: |
        mypy --python-version 3.12 .

  linter:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    - name: Install dependencies
      run: |
        python -m pip install -e .[dev]
    - name: Run ruff
      run: |
        ruff check src

  format:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    - name: Install dependencies
      run: |
        python -m pip install -e .[dev]
    - name: Code Format Check with Black
      run: |
        black --check --verbose ./src

  build:
    name: Build artifacts
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build wheel and sdist
        run: pipx run build

      - name: Check artifacts
        run: pipx run twine check dist/*

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*

  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[doc]
    - name: Build documentation
      run: |
        python -m sphinx -Wan --keep-going docs build

  upload_pypi:
    name: Create release
    needs: [ mypy, linter, build, docs, format ]
    runs-on: ubuntu-latest

    # create a new release for tagged commits
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
